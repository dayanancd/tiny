package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal BEGIN;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal RETURN;
terminal String ID;
terminal Integer NUM;
terminal Integer NUMERO_NEGATIVO;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal RT;
terminal MENEQ;
terminal MAYEQ;
terminal DIF;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal COMA;
terminal BOOLEAN;
terminal INT;
terminal VOID;
terminal FOR;
terminal SEMI;
terminal LCOR;
terminal RCOR;
terminal FUNC;
terminal PRO;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase comprobacion;
non terminal NodoBase simple_exp;
non terminal NodoBase exp_if;
non terminal NodoBase term;
non terminal NodoBase factor;

non terminal NodoBase program_full;
non terminal NodoBase multi_fun;
non terminal NodoBase ini_fun;
non terminal NodoBase decl_seq;
non terminal NodoBase block;
non terminal NodoBase decl_stmt;
non terminal NodoBase data_type;
non terminal NodoBase procedure;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;

precedence left OR;
precedence left AND;

/* REGLAS GRAMATICALES */
program     ::= program_full:pr	{: if(modoDepuracion)      
                                   ast = pr;
                                   System.out.println("\t regla 1");
				:}
;
program_full ::= multi_fun:mf block:principal {:if(modoDepuracion) System.out.println("\t regla programa"); 
                                                NodoBase hijoActual = mf;
                                                 while(hijoActual.TieneHermano()){
                                                     hijoActual = hijoActual.getHermanoDerecha();
                                                     }
                                                 hijoActual.setHermanoDerecha(funciones);
                                                 RESULT=mf;
                                                :}
            | block:principal                 {:
                                            RESULT = principal;
	
                                            :}

;
multi_fun ::= multi_fun:mf uni_fun:ini{:   if(modoDepuracion) System.out.println("\t regla 2a: funciones"); 
                                               NodoBase hijoActual = mf;
                                                if(hijoActual !=null){
                                                 while(hijoActual.TieneHermano()){
                                                 hijoActual = hijoActual.getHermanoDerecha();
                                             }
                                                 hijoActual.setHermanoDerecha(ini);
                                                RESULT=mf;
                                             }else{
                                             RESULT=ini;
                                             }
                                        :}
            | uni_func:func         {: if(modoDepuracion) System.out.println("\t regla 2b: funciones"); 
                                       RESULT=func;				
                                                
                                     :}
            | procedure:pro         {: if(modoDepuracion) System.out.println("\t regla 2c: procedimiento"); 
                                       RESULT=pro;				
                                                
                                     :}
;


uni_fun   ::= data_type:t ID:ident LPARENT data_type:dt decl_seq:decl RPARENT BEGIN data_type:dt decl_seq:decl_ini SEMI stmt_seq:cuerpo RETURN ID:valor SEMI END
                                    {: if(modoDepuracion) System.out.println("\t regla 3a: Funciones con parametro");
                                        RESULT= new NodoFuncion(ident,decl,decl_ini,cuerpo,valor);
                                    :}
            | data_type:t ID:ident LPARENT RPARENT BEGIN data_type:dt decl_seq:decl_ini SEMI stmt_seq:cuerpo RETURN ID:valor SEMI END
                                    {: if(modoDepuracion) System.out.println("\t regla 3b: Funciones sin parametro");
                                        RESULT= new NodoFuncion(ident,decl,decl_ini,cuerpo,valor);
            
;

procedure ::= VOID ID:ident LPARENT data_type:dt decl_seq:par RPARENT BEGIN data_type:dt decl_seq:ini SEMI stmt_seq:cuerpo END
                                     {: if(modoDepuracion) System.out.println("\t regla 4a: procedimiento con parametro");
                                        RESULT= new NodoFuncionV(ident,par,ini,cuerpo);
                                    :}
            | VOID ID:ident LPARENT RPARENT BEGIN data_type:dt decl_seq:ini SEMI stmt_seq:cuerpo END
                                    {: if(modoDepuracion) System.out.println("\t regla 4b: procedimiento sin parametro");
                                        RESULT= new NodoFuncion(ident,ini,cuerpo);
            
;

block    ::= BEGIN data_type:dt decl_seq:ini SEMI stmt_seq:cuerpo END {: if(modoDepuracion) System.out.println("\t regla 5: Bloque principal ");
                                                            RESULT= new NodoBloque(ini,cuerpo);
                                                        :}
;

data_type ::= BOOLEAN {: if(modoDepuracion) System.out.println("\t regla 6a: tipo de dato boolean ");
                        :}
            | INT     {: if(modoDepuracion) System.out.println("\t regla 6b: tipo de dato integer ");
                        :}
;
decl_seq ::= decl_seq:ini COMA decl_stmt:sent {:if(modoDepuracion) System.out.println("\t regla 7a: declaracion de secuencias ");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
		:}
		| decl_stmt:sent {:if(modoDepuracion) System.out.println("\t regla 7b: declaracion de secuencias, declaracion de sentencias");
                                    RESULT=sent;				
		:}
;

decl_stmt ::= data_type:dt ID:variable 
			{:
			if(modoDepurativo) System.out.println("\t regla 8a: declaracion sentencias de variable");
				NodoDeclaracion nodo = new NodoDeclaracion(0,variable.toString());
				RESULT = nodo;
	:}
	| INT ID:variable LCOR NUM:valor RCOR {:
			if(modoDepurativo) System.out.println("\t regla 8b: declaracion sentencias de vector");
				NodoDeclaracion nodo = new NodoDeclaracion(Integer.parseInt(valor.toString()),variable.toString());
				RESULT = nodo;
	:}
;
stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 9a: Sentencia de secuencia, sentencias"); 
                                                   NodoBase hijoActual = ini;
                                                   if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
                                                   }else{
							RESULT=sent;
                                                   }
						:}
                                  | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 9b: Sentencias"); 
                                                   RESULT=sent;				
                                                :}
;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 10a: sentencia if"); 
					RESULT=sif;
				:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 10b: Sentencia repeat"); 
					RESULT=srep;
				:}
            | for_stmt:sfor	{: if(modoDepuracion) System.out.println("\t regla 10c: Sentencia for"); 
					RESULT=sfor;
				:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 10d: Sentencia de asignacion"); 
					RESULT=sasi;
				:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 10e: Sentencia de lectura"); 
					RESULT=slec;
				:}
            | call_func:cfst    {: if(modoDepuracion) System.out.println("\t regla 10f: Sentencia de llamada de funcion"); 
                                    RESULT=cfst;
                                :}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 10g: Sentencia de escritura"); 
					RESULT=sesc;
				:}
            | error             {: if(modoDepuracion) System.out.println("\t regla 10h: Sentencia de error"); 
                                   System.out.println("Ocurrio error en cup # 0004");
                                   RESULT=null;
				:}
;

if_stmt     ::= IF exp_if:ex THEN stmt_seq:pthen END                       
                    {: if(modoDepuracion) System.out.println("\t regla 11a: IF exp THEN stmt_seq END"); 
                       RESULT = new NodoIf(ex,pthen);
                    :}
              | IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	
                    {: if(modoDepuracion) System.out.println("\t regla 11b"); 
                       RESULT = new NodoIf(ex,pthen,pelse);		
                    :}
;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 12: Ciclo REPEAT"); 
                                                           RESULT = new NodoRepeat(cuerpo,prueba);
							:}
;

for_stmt ::= FOR LPAREN assign_stmt:inici SEMI comprobacion:com SEMI assign_stmt:paso RPAREN stmt_seq:cuerpo END       {: if(modoDepuracion) System.out.println("\t regla 13: Ciclo FOR"); 
                                                                                                          RESULT = new NodoFor(inici,com,paso,cuerpo);
                                                                                                       :}
;

call_func ::= ID:pro LPARENT simple_exp:se RPARENT SEMI{:if(modoDepuracion) System.out.println("\t regla 14a: Llamada de la funcion");
                                                    RESULT = new NodoCallFuncion(pro.toString());
                                                    :}
             | ID:pro LPARENT RPARENT SEMI
                                                    {: if(modoDepuracion) System.out.println("\t regla 14b: Llamada de la funcion");
                                                    RESULT = new NodoCallFuncion(pro.toString());
                                                    :}
             | ID:ident assign_stmt:as ID:fun LPARENT simple_exp:se RPARENT SEMI
                                                    {: if(modoDepuracion) System.out.println("\t regla 14c: Llamada de la funcion");
                                                    RESULT = new NodoCallFuncion(fun.toString());
                                                    :}
             | ID:ident assign_stmt:as ID:fun LPARENT RPARENT SEMI
                                                    {: if(modoDepuracion) System.out.println("\t regla 14d: Llamada de la funcion");
                                                    RESULT = new NodoCallFuncion(fun.toString());
                                                    :}
;

assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 15a: Expresion de asignacion"); 
                                   /*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
                                   String nombre = variable.getName();*/
				:}
			ASSIGN simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 15b parte final");
                                            if(variable!=null)
                                                RESULT = new NodoAsignacion(variable.toString(),ex);
                                            else{
                                                RESULT = null;
                                                System.out.println("Ocurrio error en cup # 0001");
                                            }
					:}
               | ID:vector LCOR simple_exp:indice RCOR ASSIGN exp:ex {:if(modoDepuracion) System.out.println("\t regla 15c: asignacion de vector");
                                                                        if(vector!=null)
                                                                            RESULT = new NodoAsignacion(vector.toString(),indice,ex);
                                                                        else{
                                                                             RESULT = null;
                                                                             System.out.println("Ocurrio error en asignacion a vector...");
                                                                        }
                                         :}
;

read_stmt   ::= READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla 16"); 
                                            System.out.println("Leyendo Variable");
                                            if(variable!=null)
                                                RESULT = new NodoLeer(variable.toString());
                                            else{
                                                RESULT = null;
                                                System.out.println("Ocurrio error en cup # 0002");
                                            }
					:}
;
write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla 17"); 
					RESULT= new NodoEscribir(ex);
					:}
;


exp           ::= exp_if:ei                             {: if(modoDepuracion) System.out.println("\t regla 18a: Expresion if"); 
                                                           RESULT = ei;
                                                        :}
		| simple_exp:ex                          {: if(modoDepuracion) System.out.println("\t regla 18b: simple Expresion"); 
                                                           RESULT = ex;
                                                        :}
;

exp_if        ::= comprobacion:comp                     {: if(modoDepuracion) System.out.println("\t regla 19a: Expresion de comprobacion"); 
                                                           RESULT=comp;
                                                        :}               
                | inicializacion:inic                   {: if(modoDepuracion) System.out.println("\t regla 19b: Expresion de inicializacion"); 
                                                           RESULT=inic;
                                                        :}
;

inicializacion ::= simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 20a: Expresion igual"); 
                                                           RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
                 | simple_exp:exI DIF simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 20b: Expresion diferente"); 
                                                           RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
							:}
;

comprobacion ::=  exp:exI AND exp:exD                    {: if(debug) System.out.println("\t regla 21a");
                                                           RESULT = new NodoOperacion(exI,tipoOp.ylogico,exD);
                                                        :}
                | exp:exI OR exp:exD                    {: if(debug) System.out.println("\t regla 21b");
                                                           RESULT = new NodoOperacion(exI,tipoOp.ologico,exD);
                                                        :} 
                | simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 21c: Expresion Menor"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
							:} 
		| simple_exp:exI MENEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 21d: Expresion Menor igual"); 
                                                           RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
							:}
                | simple_exp:exI RT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 21e: Expresion Mayor"); 
                                                           RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							:}
                | simple_exp:exI MAYEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 21f: Expresion Mayor igual"); 
                                                           RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
							:}
;

simple_exp    ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 22a"); 
                                                   RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
						:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 22b"); 
                                                   RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
						:}
		| term:ex                       {: if(modoDepuracion) System.out.println("\t regla 22c"); 
                                                   RESULT=ex;
                                                :}
;

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 23a"); 
                                                   RESULT = new NodoOperacion(exI,tipoOp.por,exD);
						:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 23b"); 
                                                   RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex                     {: if(modoDepuracion) System.out.println("\t regla 23c"); 
                                                   RESULT=ex;
                                                :}
;

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 24a"); 
                                           RESULT = ex;
					:}
		| NUM:valor             {: if(modoDepuracion) System.out.println("\t regla 24b"); 
                                           System.out.println("Devolvi nodo numero entero");
                                           if(valor!=null){
						RESULT= new NodoValor(valor);					
                                           }else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
                                           }
					:}
		| ID:variable           {: if(modoDepuracion) System.out.println("\t regla 24c"); 
                                           if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
                                           }else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
                                           }
					:}
		| error                 {: if(modoDepuracion) System.out.println("\t regla 24d"); 
                                           System.out.println("Ocurrio error en cup # 0003");
                                           RESULT=null;
                                        :}
;